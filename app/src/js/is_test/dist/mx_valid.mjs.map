{"version":3,"file":"mx_valid.mjs","sources":["../index.js"],"sourcesContent":["/**\n * Test if entry is empty : empty array, empty string, etc.\n * @param {Any} item item to test\n */\nexport function isEmpty(item) {\n  if (!item) {\n    return true;\n  } else if (isObject(item)) {\n    return isEqual(item, {});\n  } else if (isArray(item)) {\n    return isEqual(item, []);\n  }\n}\nexport function isNotEmpty(item) {\n  return !isEmpty(item);\n}\n\n/**\n * Test if entry is an object\n * @param {Object} item\n */\nexport function isObject(item) {\n  return !!item && typeof item === 'object' && !Array.isArray(item);\n}\n\n/**\n * Test if it's a MapX view.\n * @param {Object} item to test\n */\nexport function isView(item) {\n  return (\n    isObject(item) &&\n    isString(item.type) &&\n    !!item.type.match(/^(vt|rt|cc||sm||gj)$/)\n  );\n}\n\n/**\n * Test if it's a view of given type\n * @param {Object} item to test\n * @param {String|Array} type or array of types\n * @param {Function} validator Additionnal validator that must return boolean\n */\nexport function isViewType(item, type, validator) {\n  type = isArray(type) ? type : [type];\n  const valid = isFunction(validator) ? validator(item) : true;\n  const typeOk = type.reduce((a, t) => {\n    return a ? a : item.type === t;\n  }, false);\n  return isView(item) && typeOk && valid;\n}\n\n/**\n * Test if it's a MapX view of type vt\n * @param {Object} item to test\n */\nexport function isViewVt(item) {\n  return isViewType(item, 'vt');\n}\n\n/**\n * Test if it's a MapX view of type rt\n * @param {Object} item to test\n */\nexport function isViewRt(item) {\n  return isViewType(item, 'rt');\n}\n\n/**\n * Test if it's a MapX view is editable\n * @param {Object} item to test\n */\nexport function isViewEditable(item) {\n  return isView(item) && item._edit === true;\n}\n\n/**\n * Test if is array of views object\n * @param {Array} arr Array to test\n */\nexport function isArrayOfViews(arr) {\n  return (\n    isArray(arr) &&\n    arr.reduce((a, i) => {\n      return !a ? a : isView(i);\n    }, true)\n  );\n}\n\n/**\n * Test if array of views id\n * @param {Array} arr Array of views id\n * @return {Boolean}\n */\nexport function isArrayOfViewsId(arr) {\n  return (\n    isArray(arr) &&\n    arr.reduce((a, i) => {\n      return a === false ? a : isViewId(i);\n    }, true)\n  );\n}\n\n/**\n * Check if array is sorted\n * @param {Array} arr Array to test\n * @param {Boolean} desc Descendent ?\n */\nexport function isSorted(arr, desc) {\n  return (\n    isArray(arr) &&\n    arr.every((val, i, arr) =>\n      !i || desc ? val < arr[i + 1] : val >= arr[i - 1]\n    )\n  );\n}\n\n/**\n * Test for valid project id\n * @param {String} id Project id to test\n * @return {Boolean}\n */\nexport function isProjectId(idProject) {\n  const reg = new RegExp('MX-.{3}-.{3}-.{3}-.{3}-.{3}');\n  return !!idProject && !!idProject.match(reg);\n}\n\n/**\n * Test if it's a MapX view of type vt\n * @param {Object} item to test\n */\nexport function isSourceId(id) {\n  const reg = new RegExp(\n    'mx_(vector|[a-z]{3})(_vector)?_([0-9a-z]{5,6})_([0-9a-z]{5,6})_[0-9a-z]{5,6}_[0-9a-z]{5,6}(_u_[0-9]+)?'\n  );\n  return !!id.match(id);\n}\n/**\n * Test if it's an array of MapX source id\n * @param {Array} arr Array of item to test\n */\nexport function isArrayOfSourceId(arr) {\n  return isArray(arr) && arr.every(isSourceId);\n}\n\n/**\n * Test for valid view id\n * @param {String} id View id to test\n * @return {Boolean}\n */\nexport function isViewId(idView) {\n  const expIdView = new RegExp('^MX-GJ-.{10}$|^MX-.{5}-.{5}-.{5}$');\n  return !!idView && isString(idView) && !!idView.match(expIdView);\n}\n/**\n * Test for valid project\n * @param {Object} p Project object\n * @return {Boolean}\n */\nexport function isProject(p) {\n  return isObject(p) && isProjectId(p.id);\n}\n/**\n * Test for valid project array\n * @param {Array} arr Array of projects\n * @return {Boolean}\n */\nexport function isProjectsArray(arr) {\n  return (\n    isArray(arr) &&\n    arr.reduce((a, p) => {\n      return a === false ? a : isProject(p);\n    }, true)\n  );\n}\n/**\n * Test for promise\n * @param {Promise} item item to test\n */\nexport function isPromise(item) {\n  return item instanceof Promise;\n}\n\n/**\n * Test for canvas\n * @param {Element} item item to test\n */\nexport function isCanvas(item) {\n  return item instanceof HTMLCanvasElement;\n}\n\n/**\n * Test for fontawesome icon class\n * @param {Element} item item to test\n */\nexport function isIconFont(item) {\n  return isElement(item) && item.classList.contains('fa');\n}\n\n/**\n * Test if entry is an aray\n * @param {Array} item array\n */\nexport function isArray(item) {\n  return !!item && typeof item === 'object' && Array.isArray(item);\n}\nexport function isArrayOfString(arr) {\n  return (\n    isArray(arr) &&\n    arr.reduce((a, p) => {\n      return a === false ? a : isString(p);\n    }, true)\n  );\n}\n\n/**\n * Test if entry is an table (array of object)\n * @param {Array} item array\n */\nexport function isTable(item) {\n  return (\n    isArray(item) &&\n    (function() {\n      return item.reduce((a, i) => (!a ? a : isObject(i)), true);\n    })()\n  );\n}\n\nexport function isArrayOfObject(item) {\n  return isTable(item);\n}\n/**\n * Test if entry is JSON\n * @param {String} String to test\n */\nexport function isJson(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Test if stringifiable\n * @param {Any} item\n * @return {Boolean}\n */\nexport function isStringifiable(item) {\n  return (\n    !isUndefined(item) &&\n    (isObject(item) ||\n      isArray(item) ||\n      isString(item) ||\n      isNumeric(item) ||\n      isBoolean(item))\n  );\n}\n\n/**\n * Test if entry is undefined\n * @param {Any} item\n * @return {Boolean}\n */\nexport function isUndefined(item) {\n  return typeof item === 'undefined';\n}\n\n/**\n * Test if entry is numeric\n * @param {String|Number} n string or number to test\n */\nexport function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Test if entry is boolean\n * @param {Boolean} b boolean to test\n */\nexport function isBoolean(b) {\n  return b === true || b === false;\n}\n\n/**\n * Test if is map\n * @param {Object} map Map object\n */\nexport function isMap(map) {\n  return isObject(map) && map._canvas instanceof HTMLCanvasElement;\n}\n/**\n * Test if entry is string and have the correct number of characters\n * @param {String} str, character to test\n * @param {Number} min Minumum number of characters. Default 0.\n * @param {Number} max Maximum number of characters. Default Infinity.\n */\nexport function isStringRange(str, min, max) {\n  min = min || 0;\n  max = max || Infinity;\n  var isValid = !!str && typeof str === 'string';\n  if (!isValid) {\n    return false;\n  }\n  str = str.trim();\n  return str.length >= min && str.length <= max;\n}\n\n/**\n * Test if valide base64\n */\nlet regexDataImg = new RegExp(\n  /^data:image\\/(png|jpeg|svg);base64\\,[a-zA-Z0-9\\+\\/\\=]+$/\n);\nexport function isBase64img(str) {\n  try {\n    let isValid = isStringRange(str, 22) && regexDataImg.test(str);\n    if (!isValid) {\n      return false;\n    }\n    let strb64 = str.split(',')[1];\n    return isStringRange(strb64, 10);\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * Quick type checker by group eg. image\n * @param {String} type Type to test\n * @param {String} group Group : image, ... NOTE: to be completed\n */\nexport function isValidType(type, group) {\n  const types = {\n    image: [\n      'image/apng',\n      'image/bmp',\n      'image/gif',\n      'image/jpeg',\n      'image/png',\n      'image/svg+xml',\n      'image/tiff',\n      'image/webp'\n    ]\n  };\n  return types[group].indexOf(type) > -1;\n}\n\n/**\n * Test if string contain HTML\n * @param {String} n string to test\n * @note https://stackoverflow.com/questions/15458876/check-if-a-string-is-html-or-not#answer-36773193\n */\nexport function isHTML(str) {\n  return isString(str) && /(<([^>]+)>)/i.test(str);\n}\n\n/**\n * Test if entry is an email\n * @param {String} email\n */\nexport function isEmail(email) {\n  return (\n    isString(email) &&\n    /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(\n      email\n    )\n  );\n}\n\n/**\n * Test if entry is string\n * @param {String} str string to test\n */\nexport function isString(str) {\n  return typeof str === 'string';\n}\n/**\n * Test if entry is function\n * @param {Function} fun Function to test\n */\nexport function isFunction(fun) {\n  return fun instanceof Function;\n}\n\n/**\n * Check if an object is a html element\n * @param {Object} obj object to test\n */\nexport function isElement(obj) {\n  return obj instanceof Element;\n}\n\n/**\n * Test for object equality\n *\n * @note asnwer by Ebrahim Byagowi at https://stackoverflow.com/questions/201183/how-to-determine-equality-for-two-javascript-objects\n *\n * @param {Object} x First object to compare\n * @param {Object} y Second object to compare\n * @return {Boolean} Are those object equal ?\n */\nexport function isEqual(x, y) {\n  'use strict';\n  /**\n   *\n   *\n   */\n  if (x === null || x === undefined || y === null || y === undefined) {\n    return x === y;\n  }\n  // after this just checking type of one would be enough\n  if (x.constructor !== y.constructor) {\n    return false;\n  }\n  // if they are functions, they should exactly refer to same one (because of closures)\n  if (x instanceof Function) {\n    return x === y;\n  }\n  // if they are regexps, they should exactly refer to same one (it is hard to better equality check on current ES)\n  if (x instanceof RegExp) {\n    return x === y;\n  }\n  if (x === y || x.valueOf() === y.valueOf()) {\n    return true;\n  }\n  if (Array.isArray(x) && x.length !== y.length) {\n    return false;\n  }\n\n  // if they are dates, they must had equal valueOf\n  if (x instanceof Date) {\n    return false;\n  }\n\n  // if they are strictly equal, they both need to be object at least\n  if (!(x instanceof Object)) {\n    return false;\n  }\n  if (!(y instanceof Object)) {\n    return false;\n  }\n\n  // recursive object equality check\n  var p = Object.keys(x);\n  return (\n    Object.keys(y).every(function(i) {\n      return p.indexOf(i) !== -1;\n    }) &&\n    p.every(function(i) {\n      return isEqual(x[i], y[i]);\n    })\n  );\n}\n\n/**\n * Validate url\n * @param {String} url to test\n * @note https://stackoverflow.com/questions/8667070/javascript-regular-expression-to-validate-url\n * @note https://mathiasbynens.be/demo/url-regex\n */\nexport function isUrl(url) {\n  return (\n    isString(url) &&\n    /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(\n      url\n    )\n  );\n}\n\n/**\n * Validate date\n * @param {String|Number} date to validate\n */\nexport function isDateString(date) {\n  return (\n    isString(date) &&\n    (/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(date) ||\n      /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+)|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d)|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d)/.test(\n        date\n      ))\n  );\n}\n"],"names":["isEmpty","item","isObject","isEqual","isArray","isNotEmpty","Array","isView","isString","type","match","isViewType","validator","valid","isFunction","typeOk","reduce","a","t","isViewVt","isViewRt","isViewEditable","_edit","isArrayOfViews","arr","i","isArrayOfViewsId","isViewId","isSorted","desc","every","val","isProjectId","idProject","reg","RegExp","isSourceId","id","isArrayOfSourceId","idView","expIdView","isProject","p","isProjectsArray","isPromise","Promise","isCanvas","HTMLCanvasElement","isIconFont","isElement","classList","contains","isArrayOfString","isTable","isArrayOfObject","isJson","str","JSON","parse","e","isStringifiable","isUndefined","isNumeric","isBoolean","n","isNaN","parseFloat","isFinite","b","isMap","map","_canvas","isStringRange","min","max","Infinity","trim","length","regexDataImg","isBase64img","test","split","err","isValidType","group","image","indexOf","isHTML","isEmail","email","fun","Function","obj","Element","x","y","constructor","valueOf","Date","Object","keys","isUrl","url","isDateString","date"],"mappings":"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"}